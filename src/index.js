require('dotenv').config();
const { generateDailyContent } = require('./generate-content');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');

// Configuration Google Sheets
const GOOGLE_SHEETS_ID = process.env.GOOGLE_SHEETS_ID;
const GOOGLE_SERVICE_ACCOUNT_EMAIL = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL;
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n');

// Validation des variables d'environnement
function validateEnvironment() {
    const requiredVars = [
        'GOOGLE_SHEETS_ID',
        'GOOGLE_SERVICE_ACCOUNT_EMAIL',
        'GOOGLE_PRIVATE_KEY',
        'GOOGLE_API_KEY'  // Tu utilises Google Gemini
    ];

    const missing = requiredVars.filter(varName => !process.env[varName]);

    if (missing.length > 0) {
        console.error('‚ùå Variables d\'environnement manquantes:', missing.join(', '));
        process.exit(1);
    }

    console.log('‚úÖ Variables d\'environnement valid√©es');
}

// Initialisation Google Sheets avec gestion d'erreur
async function initializeGoogleSheets() {
    try {
        const serviceAccountAuth = new JWT({
            email: GOOGLE_SERVICE_ACCOUNT_EMAIL,
            key: GOOGLE_PRIVATE_KEY,
            scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        });

        const doc = new GoogleSpreadsheet(GOOGLE_SHEETS_ID, serviceAccountAuth);
        await doc.loadInfo();

        console.log('‚úÖ Google Sheets connect√©:', doc.title);
        return doc;
    } catch (error) {
        console.error('‚ùå Erreur connexion Google Sheets:', error.message);
        throw error;
    }
}

// Sauvegarde optimis√©e avec gestion des erreurs
async function saveToGoogleSheets(doc, contents) {
    try {
        let sheet = doc.sheetsByIndex[0];

        // Cr√©er les headers si n√©cessaire
        const headers = ['Date', 'Heure', 'Type', 'Contenu', 'Mots-cl√©s', 'Statut'];
        const rows = await sheet.getRows();

        if (rows.length === 0) {
            await sheet.setHeaderRow(headers);
            console.log('‚úÖ Headers cr√©√©s dans Google Sheets');
        }

        // Pr√©parer les donn√©es avec timezone local (Cotonou)
        const now = new Date();
        const cotonouTime = new Intl.DateTimeFormat('fr-FR', {
            timeZone: 'Africa/Porto-Novo',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        }).format(now);

        const [date, heure] = cotonouTime.split(' ');

        // Sauvegarder chaque contenu
        for (let i = 0; i < contents.length; i++) {
            const content = contents[i];

            await sheet.addRow({
                'Date': date,
                'Heure': heure,
                'Type': content.thematique, // Corrig√© : utilise thematique au lieu de type
                'Contenu': content.contenu, // Corrig√© : utilise contenu au lieu de content
                'Mots-cl√©s': content.hashtags || '',
                'Statut': 'G√©n√©r√©'
            });

            console.log(`‚úÖ Contenu ${i + 1}/${contents.length} sauvegard√©: ${content.thematique}`);
        }

        console.log(`üéâ ${contents.length} contenus sauvegard√©s avec succ√®s !`);

    } catch (error) {
        console.error('‚ùå Erreur sauvegarde:', error.message);
        throw error;
    }
}

// Mode preview pour tester sans sauvegarder
async function previewContent(themeFilter = null) {
    console.log('üîç MODE PREVIEW - G√©n√©ration de contenu test...\n');

    try {
        // Utilise ta classe DailyContentGenerator existante
        const DailyContentGenerator = require('./generate-content');
        const generator = new DailyContentGenerator();

        if (themeFilter) {
            const content = await generator.previewContent(themeFilter);
            return;
        }

        // Preview d'une th√©matique au hasard
        const thematics = generator.listThematics();
        const randomThematic = thematics[Math.floor(Math.random() * thematics.length)];

        console.log(`üìù Preview de: ${randomThematic}\n`);
        await generator.previewContent(randomThematic);

    } catch (error) {
        console.error('‚ùå Erreur preview:', error.message);
    }
}

// Fonction principale
async function main() {
    const args = process.argv.slice(2);
    const isPreview = args.includes('preview');
    const themeFilter = args.find(arg => !['preview'].includes(arg));

    console.log('üöÄ G√©n√©rateur de contenu Abdias - D√©marrage...\n');

    try {
        // Validation environnement
        validateEnvironment();

        if (isPreview) {
            // Mode preview
            await previewContent(themeFilter);
            return;
        }

        // Mode production - Utilise ta classe existante
        console.log('üìä MODE PRODUCTION - G√©n√©ration et sauvegarde...\n');

        const DailyContentGenerator = require('./generate-content');
        const generator = new DailyContentGenerator();

        console.log('ü§ñ G√©n√©ration des contenus...');
        const contents = await generator.generateDailyContent();

        if (!contents || contents.length === 0) {
            console.log('‚ö†Ô∏è  Aucun contenu g√©n√©r√©');
            return;
        }

        // R√©sum√© final
        console.log('\nüéâ G√âN√âRATION TERMIN√âE !');
        console.log(`‚úÖ ${contents.length} contenus g√©n√©r√©s et sauvegard√©s`);
        console.log('üìä Types g√©n√©r√©s:', contents.map(c => c.thematique).join(', '));

    } catch (error) {
        console.error('\n‚ùå ERREUR CRITIQUE:', error.message);
        console.error('Stack:', error.stack);
        process.exit(1);
    }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
    process.exit(1);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Exception non captur√©e:', error.message);
    process.exit(1);
});

// Ex√©cution si appel√© directement
if (require.main === module) {
    main();
}

module.exports = { main, previewContent, saveToGoogleSheets };